import os
import requests
import random
import time

# === –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

# === –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (–∑–∞–º–µ–Ω—è–π –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –∫–æ –º–Ω–µ) ===
def generate_news():
    return '''üóûÔ∏è **–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–≤–æ–¥–∫–∞ ‚Äî –ê—Ä–∫–∞–Ω–∏—è**
üîπ –ö–æ—Ä–æ–ª–µ–≤–∞ –≠–ª–∏—Å IV –æ–±—ä—è–≤–∏–ª–∞ –æ –Ω–∞—á–∞–ª–µ –¥–æ–±—ã—á–∏ **–≠—Ç–µ—Ä–∏–π-–∫—Ä–∏—Å—Ç–∞–ª–ª–∞** –≤ –Ω–æ–≤—ã—Ö —Ä–∞–π–æ–Ω–∞—Ö.
üìå –≠—Ç–æ –≤—ã–∑–≤–∞–ª–æ –æ–±–µ—Å–ø–æ–∫–æ–µ–Ω–Ω–æ—Å—Ç—å —É —Å–æ—Å–µ–¥–µ–π, –æ—Å–æ–±–µ–Ω–Ω–æ —É –¢–∏—Ä–∞–Ω–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –∑–∞—è–≤–∏–ª–∞, —á—Ç–æ "–Ω–µ –ø–æ–∑–≤–æ–ª–∏—Ç —ç–∫—Å–ø–ª—É–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã —Å–∏–ª–æ–π".'''

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram ===
def send_to_telegram(text):
    url = f'https://api.telegram.org/bot{BOT_TOKEN}/sendMessage' 
    payload = {
        'chat_id': CHANNEL_ID,
        'text': text,
        'parse_mode': 'Markdown'
    }
    response = requests.post(url, data=payload)
    return response.json()

# === –ß—Ç–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ –æ—á–µ—Ä–µ–¥–∏ –ø–æ—Å—Ç–æ–≤ ===
def get_next_post():
    with open('posts/queue.txt', 'r', encoding='utf-8') as f:
        lines = f.readlines()
    if not lines:
        return None
    first_line = lines[0].strip()
    with open('posts/queue.txt', 'w', encoding='utf-8') as f:
        f.writelines(lines[1:])
    return first_line

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∞—Ä—Ö–∏–≤ ===
def archive_post(post):
    timestamp = int(time.time())
    filename = f'posts/published/post_{timestamp}.txt'
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(post)

# === –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ===
if __name__ == '__main__':
    post = get_next_post()
    if not post:
        print("–û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤ –ø—É—Å—Ç–∞.")
        exit(1)

    result = send_to_telegram(post)
    print("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏:", result)

    archive_post(post)